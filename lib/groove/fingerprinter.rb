# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Groove::Fingerprinter
  extend FFI::Library
  ffi_lib 'groovefingerprinter'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :fingerprint ::
  #   (FFI::Pointer(*Int32T)) raw fingerprint. A fingerprint is an array of signed 32-bit integers.
  # :fingerprint_size ::
  #   (Integer) the number of 32-bit integers in the fingerprint array
  # :duration ::
  #   (Float) how many seconds long this song is
  # :item ::
  #   (FFI::Pointer(*GroovePlaylistItem)) the playlist item that this info applies to.
  #   When this is NULL this is the end-of-playlist sentinel and
  #   other properties are undefined.
  class GrooveFingerprinterInfo < FFI::Struct
    layout :fingerprint, :pointer,
           :fingerprint_size, :int,
           :duration, :double,
           :item, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :info_queue_size ::
  #   (Integer) maximum number of GrooveFingerprinterInfo items to store in this
  #   fingerprinter's queue. this defaults to MAX_INT, meaning that
  #   the fingerprinter will cause the decoder to decode the entire
  #   playlist. if you want to instead, for example, obtain fingerprints
  #   at the same time as playback, you might set this value to 1.
  # :sink_buffer_size ::
  #   (Integer) how big the sink buffer should be, in sample frames.
  #   groove_fingerprinter_create defaults this to 8192
  # :playlist ::
  #   (FFI::Pointer(*GroovePlaylist)) read-only. set when attached and cleared when detached
  class GrooveFingerprinter < FFI::Struct
    layout :info_queue_size, :int,
           :sink_buffer_size, :int,
           :playlist, :pointer
  end
  
  # (Not documented)
  # 
  # @method fingerprinter_create()
  # @return [GrooveFingerprinter] 
  # @scope class
  attach_function :fingerprinter_create, :groove_fingerprinter_create, [], GrooveFingerprinter
  
  # (Not documented)
  # 
  # @method fingerprinter_destroy(printer)
  # @param [GrooveFingerprinter] printer 
  # @return [nil] 
  # @scope class
  attach_function :fingerprinter_destroy, :groove_fingerprinter_destroy, [GrooveFingerprinter], :void
  
  # once you attach, you must detach before destroying the playlist
  # 
  # @method fingerprinter_attach(printer, playlist)
  # @param [GrooveFingerprinter] printer 
  # @param [FFI::Pointer(*GroovePlaylist)] playlist 
  # @return [Integer] 
  # @scope class
  attach_function :fingerprinter_attach, :groove_fingerprinter_attach, [GrooveFingerprinter, :pointer], :int
  
  # (Not documented)
  # 
  # @method fingerprinter_detach(printer)
  # @param [GrooveFingerprinter] printer 
  # @return [Integer] 
  # @scope class
  attach_function :fingerprinter_detach, :groove_fingerprinter_detach, [GrooveFingerprinter], :int
  
  # returns < 0 on error, 0 on aborted (block=1) or no info ready (block=0),
  # 1 on info returned.
  # When you get info you must free it with groove_fingerprinter_free_info.
  # 
  # @method fingerprinter_info_get(printer, info, block)
  # @param [GrooveFingerprinter] printer 
  # @param [GrooveFingerprinterInfo] info 
  # @param [Integer] block 
  # @return [Integer] 
  # @scope class
  attach_function :fingerprinter_info_get, :groove_fingerprinter_info_get, [GrooveFingerprinter, GrooveFingerprinterInfo, :int], :int
  
  # (Not documented)
  # 
  # @method fingerprinter_free_info(info)
  # @param [GrooveFingerprinterInfo] info 
  # @return [nil] 
  # @scope class
  attach_function :fingerprinter_free_info, :groove_fingerprinter_free_info, [GrooveFingerprinterInfo], :void
  
  # returns < 0 on error, 0 on no info ready, 1 on info ready
  # if block is 1, block until info is ready
  # 
  # @method fingerprinter_info_peek(printer, block)
  # @param [GrooveFingerprinter] printer 
  # @param [Integer] block 
  # @return [Integer] 
  # @scope class
  attach_function :fingerprinter_info_peek, :groove_fingerprinter_info_peek, [GrooveFingerprinter, :int], :int
  
  # get the position of the printer head
  # both the current playlist item and the position in seconds in the playlist
  # item are given. item will be set to NULL if the playlist is empty
  # you may pass NULL for item or seconds
  # 
  # @method fingerprinter_position(printer, item, seconds)
  # @param [GrooveFingerprinter] printer 
  # @param [FFI::Pointer(**GroovePlaylistItem)] item 
  # @param [FFI::Pointer(*Double)] seconds 
  # @return [nil] 
  # @scope class
  attach_function :fingerprinter_position, :groove_fingerprinter_position, [GrooveFingerprinter, :pointer, :pointer], :void
  
  # Compress and base64-encode a raw fingerprint
  # 
  # The caller is responsible for freeing the returned pointer using
  # groove_fingerprinter_dealloc().
  # 
  # Parameters:
  #  - fp: pointer to an array of signed 32-bit integers representing the raw
  #        fingerprint to be encoded
  #  - size: number of items in the raw fingerprint
  #  - encoded_fp: pointer to a pointer, where the encoded fingerprint will be
  #                stored
  # 
  # Returns:
  #  - 0 on success, < 0 on error
  # 
  # @method fingerprinter_encode(fp, size, encoded_fp)
  # @param [FFI::Pointer(*Int32T)] fp 
  # @param [Integer] size 
  # @param [FFI::Pointer(**CharS)] encoded_fp 
  # @return [Integer] 
  # @scope class
  attach_function :fingerprinter_encode, :groove_fingerprinter_encode, [:pointer, :int, :pointer], :int
  
  # Uncompress and base64-decode an encoded fingerprint
  # 
  # The caller is responsible for freeing the returned pointer using
  # groove_fingerprinter_dealloc().
  # 
  # Parameters:
  #  - encoded_fp: Pointer to an encoded fingerprint
  #  - encoded_size: Size of the encoded fingerprint in bytes
  #  - fp: Pointer to a pointer, where the decoded raw fingerprint (array
  #        of signed 32-bit integers) will be stored
  #  - size: Number of items in the returned raw fingerprint
  # 
  # Returns:
  #  - 0 on success, < 0 on error
  # 
  # @method fingerprinter_decode(encoded_fp, fp, size)
  # @param [String] encoded_fp 
  # @param [FFI::Pointer(**Int32T)] fp 
  # @param [FFI::Pointer(*Int)] size 
  # @return [Integer] 
  # @scope class
  attach_function :fingerprinter_decode, :groove_fingerprinter_decode, [:string, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method fingerprinter_dealloc(ptr)
  # @param [FFI::Pointer(*Void)] ptr 
  # @return [nil] 
  # @scope class
  attach_function :fingerprinter_dealloc, :groove_fingerprinter_dealloc, [:pointer], :void
  
end
