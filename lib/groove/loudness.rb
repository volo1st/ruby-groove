# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Groove::Loudness
  extend FFI::Library
  ffi_lib 'grooveloudness'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :loudness ::
  #   (Float) loudness is in LUFS. 1 LUFS == 1 dB
  #   EBU R128 specifies that playback should target -23 LUFS. replaygain on
  #   the other hand is a suggestion of how many dB to adjust the gain so
  #   that it equals -18 dB.
  #   so, for playback you might adjust the gain so that it is equal to -18 dB
  #   (this would be the replaygain standard) or so that it is equal to -23 dB
  #   (this would be the EBU R128 standard).
  # :peak ::
  #   (Float) peak amplitude in float format
  # :duration ::
  #   (Float) how many seconds long this song is
  # :item ::
  #   (FFI::Pointer(*GroovePlaylistItem)) if item is NULL, this info applies to all songs analyzed until
  #   this point. otherwise it is the playlist item that this info
  #   applies to.
  #   when disable_album is set, this sentinel is still sent, but loudness
  #   will be set to 0
  class GrooveLoudnessDetectorInfo < FFI::Struct
    layout :loudness, :double,
           :peak, :double,
           :duration, :double,
           :item, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :info_queue_size ::
  #   (Integer) maximum number of GrooveLoudnessDetectorInfo items to store in this
  #   loudness detector's queue. this defaults to MAX_INT, meaning that
  #   the loudness detector will cause the decoder to decode the entire
  #   playlist. if you want to instead, for example, obtain loudness info
  #   at the same time as playback, you might set this value to 1.
  # :sink_buffer_size ::
  #   (Integer) how big the sink buffer should be, in sample frames.
  #   groove_loudness_detector_create defaults this to 8192
  # :disable_album ::
  #   (Integer) set to 1 to only compute track loudness. This is faster and requires
  #   less memory than computing both.
  # :playlist ::
  #   (FFI::Pointer(*GroovePlaylist)) read-only. set when attached and cleared when detached
  class GrooveLoudnessDetector < FFI::Struct
    layout :info_queue_size, :int,
           :sink_buffer_size, :int,
           :disable_album, :int,
           :playlist, :pointer
  end
  
  # (Not documented)
  # 
  # @method loudness_detector_create()
  # @return [GrooveLoudnessDetector] 
  # @scope class
  attach_function :loudness_detector_create, :groove_loudness_detector_create, [], GrooveLoudnessDetector
  
  # (Not documented)
  # 
  # @method loudness_detector_destroy(detector)
  # @param [GrooveLoudnessDetector] detector 
  # @return [nil] 
  # @scope class
  attach_function :loudness_detector_destroy, :groove_loudness_detector_destroy, [GrooveLoudnessDetector], :void
  
  # once you attach, you must detach before destroying the playlist
  # 
  # @method loudness_detector_attach(detector, playlist)
  # @param [GrooveLoudnessDetector] detector 
  # @param [FFI::Pointer(*GroovePlaylist)] playlist 
  # @return [Integer] 
  # @scope class
  attach_function :loudness_detector_attach, :groove_loudness_detector_attach, [GrooveLoudnessDetector, :pointer], :int
  
  # (Not documented)
  # 
  # @method loudness_detector_detach(detector)
  # @param [GrooveLoudnessDetector] detector 
  # @return [Integer] 
  # @scope class
  attach_function :loudness_detector_detach, :groove_loudness_detector_detach, [GrooveLoudnessDetector], :int
  
  # returns < 0 on error, 0 on aborted (block=1) or no info ready (block=0),
  # 1 on info returned
  # 
  # @method loudness_detector_info_get(detector, info, block)
  # @param [GrooveLoudnessDetector] detector 
  # @param [GrooveLoudnessDetectorInfo] info 
  # @param [Integer] block 
  # @return [Integer] 
  # @scope class
  attach_function :loudness_detector_info_get, :groove_loudness_detector_info_get, [GrooveLoudnessDetector, GrooveLoudnessDetectorInfo, :int], :int
  
  # returns < 0 on error, 0 on no info ready, 1 on info ready
  # if block is 1, block until info is ready
  # 
  # @method loudness_detector_info_peek(detector, block)
  # @param [GrooveLoudnessDetector] detector 
  # @param [Integer] block 
  # @return [Integer] 
  # @scope class
  attach_function :loudness_detector_info_peek, :groove_loudness_detector_info_peek, [GrooveLoudnessDetector, :int], :int
  
  # get the position of the detect head
  # both the current playlist item and the position in seconds in the playlist
  # item are given. item will be set to NULL if the playlist is empty
  # you may pass NULL for item or seconds
  # 
  # @method loudness_detector_position(detector, item, seconds)
  # @param [GrooveLoudnessDetector] detector 
  # @param [FFI::Pointer(**GroovePlaylistItem)] item 
  # @param [FFI::Pointer(*Double)] seconds 
  # @return [nil] 
  # @scope class
  attach_function :loudness_detector_position, :groove_loudness_detector_position, [GrooveLoudnessDetector, :pointer, :pointer], :void
  
end
